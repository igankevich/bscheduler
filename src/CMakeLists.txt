find_package(Threads REQUIRED)

macro(factory_add_test_aux)
	set(binary_name "${ARGV0}")
	set(src_name "${ARGV1}")
	set(defs "${ARGV2}")
	if(NOT src_name)
		set(src_name ${binary_name})
	endif()
	message(STATUS "debug ${src_name}, ${binary_name}")
	add_executable(${binary_name} ${src_name}.cc)
	target_compile_features(${binary_name} PRIVATE cxx_range_for)
	target_link_libraries(${binary_name} ${CMAKE_THREAD_LIBS_INIT})
	target_compile_definitions(${binary_name} PRIVATE ${defs})
endmacro(factory_add_test_aux)

macro(factory_add_test)
	set(binary_name "${ARGV0}")
	factory_add_test_aux(${ARGV0} ${ARGV1} ${ARGV2})
	add_test(NAME ${binary_name} COMMAND ${binary_name})
endmacro(factory_add_test)

factory_add_test(test_socket)
factory_add_test(test_websocket test_socket "-DFACTORY_TEST_WEBSOCKET")
factory_add_test(test_offline test_socket "-DFACTORY_TEST_OFFLINE")
factory_add_test(test_endpoint)
factory_add_test(test_buffer)
factory_add_test(test_marshaling)
factory_add_test(test_shmem)
factory_add_test(test_spinlock)
factory_add_test(test_encoding)
factory_add_test(test_timer)
factory_add_test(test_uint128)
factory_add_test(test_uint128_custom test_uint128 "-DFACTORY_FORCE_CUSTOM_UINT128")
factory_add_test(test_poller)
factory_add_test(test_appserver_srv test_appserver "-DFACTORY_TEST_SERVER -DFACTORY_APP_PATH=$(abs_srcdir)/test_appserver_app")
factory_add_test_aux(test_appserver_app test_appserver "-DFACTORY_TEST_APP")
#factory_add_test_aux(test_discovery test_discovery "-DFACTORY_NO_CPU_BINDING")

add_executable(test_posix test_posix.cc)
