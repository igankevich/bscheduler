#!/usr/bin/python

import sys
import os

from optparse import OptionParser
from mininet.net import Mininet
from mininet.topolib import TreeTopo
from mininet.node import Host
from mininet.node import OVSController
from mininet.util import ensureRoot
from mininet.log import lg

ensureRoot()

# parse command line options and arguments
parser = OptionParser(description='Runs a command on each host of Mininet.')
parser.add_option('--depth', '-d', type='int', dest='depth', default=1)
parser.add_option('--fanout', '-f', type='int', dest='fanout', default=3)
parser.add_option('--pattern', '-p', type='string', dest='pattern', default='dscvr')
opts, args = parser.parse_args()
cmd=' '.join(args)
base_ip = '10.0.0.1'
lg.setLogLevel('info')

# create virtual network with a topology of a tree
topo = TreeTopo(depth=opts.depth, fanout=opts.fanout)
net = Mininet(topo=topo, controller=OVSController)
switch = net['s1']
root = Host('root', inNamespace=False)
switch.linkTo(root)
root.setIP('10.123.123.123/32')

try:
	net.start()
	# run Factory test on each host of the virtual network
	start_id = 1000;
	for host in net.hosts:
		host.cmd('START_ID=%i %s --num-peers %i --base-ip %s >/tmp/%s.log 2>&1 &'
			% (start_id, cmd, len(net.hosts), base_ip, host.IP()))
		start_id += 1000;
	# wait for the completion
	for host in net.hosts:
		print host.cmd('wait')
	os.system("grep -h %s /tmp/*.*.log | sort -nk1 -t' '" % opts.pattern)
except:
	# print log records in chronological order
	os.system("grep -h %s /tmp/*.*.log | sort -nk1 -t' '" % opts.pattern)
finally:
#	os.system("rm -f /tmp/*.*.log")
	net.stop()
