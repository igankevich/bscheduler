DONE [48:260086e3e0fe] Graceful Socket_server shutdown
DONE [52:454ba97ae645] Graceful Factory shutdown
DONE [62:520b6908f3e3] Coalesce multiple incoming and outgoing connections made between the same hosts using different ports.
DONE [71:97d92e8d4d02] Kernels' recovery when upstream server goes offline after receiving the kernels.
DONE [83:a6c333464330] Use spin locks for scheduling strategies.
DONE [179:c228b05b2d32] Clean obsolete classes (Server_stack, Server_server). Place relevant classes into a common header file (Socket, Server_socket, Client_socket, Web_socket into socket.hh).
DONE [184:b3afe82e233a] Remove non-portable WebSocket dependencies on memchr, bzero and other fancy functions.
DONE [286:2ecc671dd024] Add Valgrind memory tests.
DONE [289:619c7dbe9fcc] Add handshake states to WebSocket class.
DONE [297:67e9297e83d0] Add IPv6 support through 'struct sockaddr_storage'.
DONE [297:67e9297e83d0] Replace inet_ntop, inet_pton with C++ analogs, possibly with IPv6 support.
DONE [319:0659552874b2] Add runtime check for endiannes.
DONE [320:8bbef1f9628a] Introduce ``flags'' field in Basic_kernel. Possible uses: DELETED flag to recursively delete all kernels in queues and in the flight upon Factory::stop().
DONE [321:e1d2e1e0b62b] 'CXXFLAGS' is a user variable, you should not override it: use 'AM_CXXFLAGS' instead.
DONE [328:143d5982c6a1] Make servers and all other pointer entities move-constructible to reduce possibility of bad memory address access errors.
DONE [] Remove factory_stop() and other global functions. Now multiple factory instances, and custom factory instances are possible.
DONE [] Close all Socket in destructor (use rvalue references).
DONE [] User defined literals for uint128.
DONE [] Replace std::mutex with Spin_mutex in server queues.
DONE [all new/delete operations were removed from NIC_server, pointers are needed to store poll() handlers] Minimise the use of bare pointers (use reference_wrappers, unique_ptrs etc.).

??? [needs more testing] Make Factory::stop() reliable.
??? [needs perf tests] Filter out chars <= 31 and != \r\n on std::cout stream.
??? [needs testing on real socket] Increase fdbuf size to fit whole Kernel object (use seekg and tellg to fill internal buffer).

NOT NEEDED [complicates current API] Specialise Bytes class for fixed size arrays.
NOT NEEDED [OS will do better] Implement thread affinity through pthread library with fall back to native OS calls.
NOT NEEDED [it is not safe] Log markup for terminal.
NOT NEEDED [type_traits is faster to compile] User defined literals for class metadata.
NOT NEEDED [there many tools to access and filter logs (e.g. journalctl, grep /var/log/syslog etc.), so we forward our logs to them] Make logs machine-readable (prepend process ID, thread ID. date and time, object the log record refers to) and accessible through --verbose (-v) option.
NOT NEEDED [use syslog and custom streambuf for std::clog instead] Create log server to minimise lock contention when writing to log.
NOT NEEDED [thread-safe containers are not flexible enough for factory servers, use templated base class for all servers instead] Make locks mutable.

Make Buffer and LBuffer a subclass of std::streambuf.
Handle cases when a machine has multiple IP addresses.

Add IPv6 support: rewrite discover_neighbours() to support large networks scanning.
Remove stale connections from Socket_server.
Remove stale peers from Peers.
Limit number of peers to reduce number of persistent connections.
Manually align structures.
Add macros to generate code for parallel and distributed framework versions.
Test web socket and socket with random input to cover parsing and other errors.
Reduce amount of debug information in logs.
Add support for provenance.
Add common header to source files.
Add license.
Implement generic state machine for use in kernelbuf and websocketbuf. State machine is needed for input streams only.
Replace *all* global variables with singletons to make possible to include factory.hh into multiple compilaation units.
Ignore all useless signals.
Add thread names to write to logs. Probably store them in thread pool.
Shred environment on startup (no whitelist).
Close fds other than 0, 1, 2 on startup (use getrlimit to determine maximum count and poll to process them in batches).
Add Kernel flag ASYNC_IO to read/write foreign streams asynchronously.
